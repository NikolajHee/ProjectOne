#Project 1: Bakterie-Dataanalyse
#imports


import numpy as np
import warnings


def dataLoad(filename):
    """
    Parameters
    ---------
    filename: Name of file containing Nx3-matrix 

    Returns
    -------
    Nx3-Matrix but filtered (compromised rows are excluded)
    """
    file=open(filename,"r")
    #An array with the txt file's lines
    aMatrix=np.array(file.read().splitlines())
    # Arrays with zeros based on the number of lines in the file
    temp=np.zeros(len(aMatrix))
    growth=np.zeros(len(aMatrix))
    bacteria=np.zeros(len(aMatrix))

    #Converts all the strings to floats
    for i in range(len(aMatrix)):
        A=list(map(float,aMatrix[i].split()))
        B=np.array(A)
        if (10<=B[0]<=60) & (B[1]>0) & (B[2]==1 or B[2]==2 or B[2]==3 or B[2]==4):
            temp[i]=B[0]
            growth[i]=B[1]
            bacteria[i]=B[2]
        elif 10>B[0] or B[0]>60:
            print("Error linje", i+1,"\n--> Temperaturen er ikke mellem 10 og 60")
        elif B[1]<=0:
            print("Error linje", i+1,"\n--> Growth Rate er ikke større end nul")
        else:
            print("Error linje", i+1,"\n--> Den valgte bakteriekategori findes ikke")
     
 
    #sætter de tre arrays sammen, men får at få dem som kolonner transponeres matrixen
    bmatrix=np.vstack((temp,growth,bacteria)).T
    #Danner en ny matrix med alle rækkerne, som ikke er nuller
    data= bmatrix[np.all(bmatrix != 0,axis=1)]

    return data


#s214644; Nikolaj Hertz
#Forslag til ændringer:
#     -
def dataStatistics(data, statistic):
    """
    Parameters
    ----------
    data: Nx3 matrix with colums temperature, groth rate and bacteria.
    statistic: required statistical scalar.

    Returns
    -------
    Scalar, the result of the statistical measurement.  
    """
    temp = data[:,0]
    growth_Rate = data[:,1]
    bacteria = data[:,2]
    errorMsg = 'Wrong input.'

    rows, col = np.shape(data) 

    statStr = np.array(["mean temperature","mean growth rate","std temperature","std growth rate",
                    "rows","mean cold growth rate","mean hot growth rate"])
    with warnings.catch_warnings():
        warnings.simplefilter('ignore')
        statFlo = np.round(np.array([np.mean(temp), np.mean(growth_Rate), np.std(temp), np.std(growth_Rate),
                            rows, np.mean(temp[temp<20]), np.mean(temp[temp>50])]),3)

    #sikkerhedsnet for hvis parameteren statistic har en udefineret værdi
    if not np.any((statStr==statistic.lower())):
        return errorMsg


    #array med den efterspurgte statistiske værdi
    expectedStat = ((statStr==statistic.lower())*statFlo)
    
    try:
        result = expectedStat[expectedStat!=0][0]
    except IndexError:
        result = 0.0
    finally:
        return result


def dataPlot(data):
    """
    Parameters
    __________
    data : N x 3 - Matrix

    Returns:
    --------
    None (displays plots)
    """



    return



#Initial Statements:
quit = False
filter = False

#Program loop:
while not quit:
    print(" 1. Load data.\n",
           "2. Filter data.\n",
           "3. Display statistics.\n",
           "4. Generate plots.\n",
           "5. Quit.\n",
           "Choose: ")
    nInput = input()
    
    #Sikkerhedsnet for input:
    try:
        number = int(nInput)
    except ValueError:
        number = 0



    if number == 1:
        #dataLoad
        print("What is the filename: ")
        filename = input()
        #Indsæt security for input


        finalData = data = dataLoad(filename)
        rows, col = np.shape(data)
        print("Data is loaded.")

    elif number == 2:
        #Filter
        print(' 1. Filter for Bacteria type.\n',
               '2. A range filter for Growth Rate.')
        if filter:
            print(' 3. Disable Filter')
           
        print('Choose: ')
        filterInput = input()
        #Skkerhedsnet for input:
        try:
            filterNumber = int(filterInput)
        except ValueError:
            filterNumber = 0

        
        if filterNumber == 1:
            print("Limiting data to one bacteria-type. Type which.\n",":")
            bacteriaInput = input() 

            finalData = np.delete(data,(np.arange(0,rows)[data[:,2]!=int(bacteriaInput)]),0)
            print("Data is filtered. ")
            filter = True
        elif filterNumber == 2: #FUNGERER IKKE ENDNU
            print("Filter fo growth rate from: ")
            fromFilter = input()
            print("to:")
            toFilter = input()
            finalData = np.delete(np.delete(data,(np.arange(0,rows)[data[:,1]>int(toFilter)]),0),(np.arange(0,rows)[data[:,1]<int(fromFilter)]),0)
            print("Data is filtered.")
            filter = True
        elif (filterNumber == 3) and (filter):
            finalData = data
            filter = False
            print("Filter is removed.")
        else:
            print("Wrong input. You must type a number between 1 and 2!")


    elif number == 3:
        #Display Statistics
        print("What statistic do you want: ")
        statistic = input()
        #Sikkerhed for input
        try:
            output = dataStatistics(finalData, statistic)
            print(statistic[0].upper()+statistic[1:].lower(),":",output)
        except NameError:
            print("You have not loaded any data yet!")

    elif number == 4:
        #Generate plots
        dataPlot(finalData)


    elif number == 5:
        #Qut
        quit = True

    else:
        print("Wrong input. You must type a number between 1 and 5!")


